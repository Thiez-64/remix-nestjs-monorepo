// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}



enum TankMaterial {
  INOX
  BETON
  BOIS
  PLASTIQUE
}

enum TankStatus {
  EMPTY
  IN_USE
  MAINTENANCE
}

enum BatchStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  PAUSED
}

enum ActionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  WAITING_STOCK
}

enum CommodityType {
  FERMENTATION_ADDITIVES
  STABILIZATION_CLARIFICATION
  ORGANOLEPTIC_CORRECTION
  ENERGY
  ANALYSIS_LAB
  FILTRATION
  PACKAGING
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  name              String?
  password          String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  role              UserRole            @default(USER)
  sessions          Session[]
  passwordResetTokens PasswordResetToken[]
  actions           Action[]
  tanks            Tank[]
  processes        Process[]
  batches          Batch[]
  stocks           Stock[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  ipAddress String?
  userAgent String?
  sessionToken String @unique
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
}

model Tank {
  id            String       @id @default(cuid())
  name          String       // Nom de la cuve: "Cuve A1", "Tank Inox 2"
  description   String?
  material      TankMaterial
  capacity      Float        // Capacité maximale de la cuve
  currentWine   Float        @default(0)
  allocatedVolume Float      @default(0) // Volume de la cuvée assigné à cette cuve
  status        TankStatus   @default(EMPTY)
  batchId       String?      // Batch (cuvée) assigné à ce tank
  userId        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  user        User         @relation(fields: [userId], references: [id])
  batch       Batch?       @relation(fields: [batchId], references: [id])

  @@index([userId])
  @@index([batchId])
}

model Process {
  id          String          @id @default(cuid())
  name        String
  description String?
  userId      String
  startDate   DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  user        User            @relation(fields: [userId], references: [id])
  batch       Batch?          // Batch qui utilise ce processus
  actions     Action[]        // Actions de ce processus (one-to-many)
 

  @@index([userId])
}



model Batch {
  id          String      @id @default(cuid())
  name        String
  description String?
  quantity    Float
  status      BatchStatus @default(PLANNED)
  processId   String?     @unique // Batch a un process
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user        User        @relation(fields: [userId], references: [id])
  process     Process?    @relation(fields: [processId], references: [id])
  tanks       Tank[]      // Tanks qui utilisent ce batch
  

  @@index([userId])
  @@index([processId])
}


model Action {
  id              String        @id @default(cuid())
  type            String
  description     String?
  duration        Float
  needsPurchase   Boolean       @default(false)
  scaleWithVolume Boolean       @default(false)
  referenceVolume Float?
  status          ActionStatus        @default(PENDING)
  userId          String
  processId       String?
  process         Process?      @relation(fields: [processId], references: [id])
  consumables     Consumable[]
  user            User          @relation(fields: [userId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  assignedDate    DateTime?

  @@index([userId])
  @@index([processId])
}

model Consumable {
  id               String       @id @default(cuid())
  name             String       // Master data: nom du produit
  unit             String       // Master data: unité de mesure  
  commodity        CommodityType @default(FERMENTATION_ADDITIVES) // Master data: type de commodité
  quantity         Float        // Quantité requise pour cette action
  originalQuantity Float?       // Quantité de référence originale (pour les actions avec scaleWithVolume)
  description      String?      // Description du produit/utilisation
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  // Relations
  stockId          String?      // Un consommable peut avoir un stock
  stock            Stock?       @relation(fields: [stockId], references: [id], onDelete: SetNull)
  actionId         String?      // Un consommable peut avoir une seule action
  action           Action?      @relation(fields: [actionId], references: [id], onDelete: Cascade)

  @@unique([name, unit, actionId], name: "consumable_name_unit_action") 
  @@index([actionId])
  @@index([stockId])
  @@index([name, unit]) // Pour recherche dans CreatableCombobox
}

model Stock {
  id          String   @id @default(cuid())
  name        String   // Référence vers le produit (doit matcher Consumable.name)
  unit        String   // Référence vers l'unité (doit matcher Consumable.unit)
  quantity    Float    // Quantité disponible en stock (compteur)
  minimumQty  Float    @default(0) // Seuil d'alerte stock
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isOutOfStock Boolean @default(false)

  // Relations
  user        User         @relation(fields: [userId], references: [id])
  consumables Consumable[] // Un stock peut avoir plusieurs consommables

  @@unique([name, unit, userId]) // Un seul stock par produit/unité/utilisateur
  @@index([userId])
}
