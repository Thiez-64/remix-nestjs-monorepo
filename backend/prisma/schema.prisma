// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum WineType {
  ROUGE
  BLANC
  ROSE
}

enum TankMaterial {
  INOX
  BETON
  BOIS
  PLASTIQUE
}

enum TankStatus {
  EMPTY
  IN_USE
  MAINTENANCE
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  name              String?
  password          String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  role              UserRole            @default(USER)
  sessions          Session[]
  passwordResetTokens PasswordResetToken[]
  actions           Action[]
  tanks            Tank[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  ipAddress String?
  userAgent String?
  sessionToken String @unique
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
}

model Tank {
  id          String       @id @default(cuid())
  name        String
  description String?
  material    TankMaterial
  capacity    Float
  currentWine Float        @default(0)
  wineType    WineType?
  status      TankStatus   @default(EMPTY)
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
}

model Action {
  id               String       @id @default(cuid())
  type             String
  description      String
  estimatedDuration Int
  needsPurchase    Boolean      @default(false)
  wineType         String
  userId           String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  user         User         @relation(fields: [userId], references: [id])
  consumables  ActionConsumable[]

  @@index([userId])
}

model Consumable {
  id          String       @id @default(cuid())
  name        String
  unit        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  actions     ActionConsumable[]

  @@unique([name, unit])
}

model ActionConsumable {
  id            String     @id @default(cuid())
  actionId      String
  consumableId  String
  quantity      Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  action      Action     @relation(fields: [actionId], references: [id], onDelete: Cascade)
  consumable  Consumable @relation(fields: [consumableId], references: [id], onDelete: Cascade)

  @@unique([actionId, consumableId])
  @@index([actionId])
  @@index([consumableId])
}

enum ActionTankType {
  RECEPTIONNER_MOUT
  FERMENTATION_ALCOOLIQUE
  FERMENTATION_MALO_LACTIQUE
  CLARIFIER
  STABILISER
  AJUSTER
  FILTRER
  METTRE_EN_BOUTEILLE
  METTRE_EN_BIB
} 


